/**
 * Feel free to make fields optional, add needed fields etc.
 * Generated by http://json2ts.com/ from some real forms
 * FormIO has very poor typing
 */
export interface FormComponent<T = unknown> {
  action?: string;
  addAnother?: string;
  allowCalculateOverride?: boolean;
  allowInput?: boolean;
  allowMultipleMasks?: boolean;
  attributes?: Record<string, never>;
  autocomplete?: string;
  autofocus?: boolean;
  block?: boolean;
  calculateServer?: boolean;
  calculateValue?: string;
  case?: string;
  clearOnHide?: boolean;
  clearOnRefresh?: boolean;
  components?: Array<FormComponent>;
  columns?: Column[];
  conditional?: {
    show?: unknown;
    when?: unknown;
    eq: string;
    json?: string;
  };
  conditionalAddButton?: string;
  customClass?: string;
  customConditional?: string;
  customDefaultValue?: string;
  customOptions?: Record<string, never>;
  data?: {
    values: Array<{
      label: string;
      value: string;
    }>;
    resource: string;
    json: string;
    url: string;
    custom: string;
  };
  dataGridLabel?: boolean;
  dataSrc?: string;
  datePicker?: {
    minDate?: unknown;
    maxDate?: unknown;
    disable: string;
    disableFunction: string;
    disableWeekends: boolean;
    disableWeekdays: boolean;
    showWeeks: boolean;
    startingDay: number;
    initDate: string;
    minMode: string;
    maxMode: string;
    yearRows: number;
    yearColumns: number;
  };
  datepickerMode?: string;
  dayFirst?: boolean;
  dbIndex?: boolean;
  defaultDate?: string;
  defaultOpen?: boolean;
  defaultValue?: T;
  delimiter?: boolean;
  description?: string;
  disableAddingRemovingRows?: boolean;
  disableOnInvalid?: boolean;
  disabled?: boolean;
  displayInTimezone?: string;
  displayMask?: string;
  enableDate?: boolean;
  enableMaxDateInput?: boolean;
  enableMinDateInput?: boolean;
  enableTime?: boolean;
  encrypted?: boolean;
  errorLabel?: string;
  fields?: Record<
    'day' | 'month' | 'year',
    {
      type: string;
      placeholder: string;
      hide: boolean;
      required: boolean;
    }
  >;
  fileKey?: string;
  fileMaxSize?: string;
  fileMinSize?: string;
  filePattern?: string;
  format?: string;
  hidden?: boolean;
  hideContentLabel?: boolean;
  hideInputLabels?: boolean;
  hideLabel?: boolean;
  html?: string;
  id?: string;
  idPath?: string;
  image?: boolean;
  imageSize?: string;
  indexeddb?: {
    filter: Record<string, never>;
  };
  inlineEdit?: boolean;
  input?: boolean;
  inputFormat?: string;
  inputMask?: string;
  inputType?: string;
  inputsLabelPosition?: string;
  key: string;
  label: string;
  labelPosition?: string;
  leftIcon?: string;
  limit?: number;
  logic?: unknown[];
  mask?: boolean;
  maxDate?: string;
  minDate?: string;
  minSearch?: number;
  modal?: boolean;
  modalEdit?: boolean;
  multiple?: boolean;
  openWhenEmpty?: boolean;
  options?: string;
  overlay?: {
    style: string;
    left: string;
    top: string;
    width: string;
    height: string;
    page?: string;
  };
  persistent?: boolean | 'client-only';
  placeholder?: string;
  prefix?: string;
  privateDownload?: boolean;
  properties?: Record<string, never>;
  protected?: boolean;
  redrawOn?: string;
  refreshOn?: string;
  refreshOnBlur?: string;
  removeRow?: string;
  requireDecimal?: boolean;
  rightIcon?: string;
  rowClass?: string;
  rowDrafts?: boolean;
  saveOnEnter?: boolean;
  saveRow?: string;
  shortcut?: string;
  shortcutButtons?: unknown[];
  showCharCount?: boolean;
  showValidations?: boolean;
  showWordCount?: boolean;
  size?: string;
  spellcheck?: boolean;
  storage?: string;
  suffix?: string;
  tabindex?: string;
  tableView: boolean;
  tags?: unknown[];
  template?: string;
  templates?: {
    header: string;
    row: string;
    footer: string;
  };
  theme?: string;
  timePicker?: {
    showMeridian: boolean;
    hourStep: number;
    minuteStep: number;
    readonlyInput: boolean;
    mousewheel: boolean;
    arrowkeys: boolean;
  };
  timezone?: string;
  tooltip?: string;
  tree?: boolean;
  truncateMultipleSpaces?: boolean;
  type: string;
  unique?: boolean;
  uploadOnly?: boolean;
  url?: string;
  useLocaleSettings?: boolean;
  validate?:
    | {
        custom: string;
        customPrivate: boolean;
        maxLength: string;
        minLength: string;
        multiple: boolean;
        pattern: string;
        required: boolean;
        strictDateValidation: boolean;
        unique: boolean;
      }
    | {
        custom: string;
        customMessage?: string;
        customPrivate: boolean;
        integer?: string;
        json?: string;
        max?: string | number;
        maxLength?: unknown;
        min?: string | number;
        minLength?: unknown;
        multiple: boolean;
        onlyAvailableItems?: boolean;
        pattern?: string;
        required: boolean;
        step?: string;
        strictDateValidation: boolean;
        unique: boolean;
      };
  validateOn?: string;
  valueProperty?: string;
  widget?:
    | null
    | string
    | {
        type: string;
      }
    | {
        type: string;
        allowInput?: boolean;
        disableFunction: string;
        disableWeekdays?: boolean;
        disableWeekends?: boolean;
        disabledDates: string;
        displayInTimezone: string;
        enableTime?: boolean;
        format: string;
        hourIncrement?: number;
        locale:
          | string
          | {
              firstDayOfWeek: number;
              weekdays: {
                shorthand: string[];
                longhand: string[];
              };
              months: {
                shorthand: string[];
                longhand: string[];
              };
              time_24hr: boolean;
            };
        maxDate?: unknown;
        minDate?: unknown;
        minuteIncrement?: number;
        mode: string;
        noCalendar?: boolean;
        time_24hr?: boolean;
        useLocaleSettings?: boolean;
      };
  resourceValidation?: string;
}

export interface TableComponent {
  rows: { components: FormComponent[] }[][];
}

export type Column = {
  components: FormComponent[];
  offset: number;
  push: number;
  pull: number;
  size: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
};
interface BaseFormSchema {
  type: string;
  display?: string;
  title?: string;
  name: string;
  path: string;
  components: Array<FormComponent>;
}

export interface FormSchema extends BaseFormSchema {
  _id?: string;
  type: string;
  tags?: unknown[];
  owner?: unknown;
  components: FormComponent[];
  title: string;
  name: string;
  path: string;
  submissionAccess: Array<{
    roles: string[];
    type: string;
  }>;
  access?: Array<{
    roles: string[];
    type: string;
  }>;
  machineName?: string;
  created?: string;
  modified?: string;
  display?: string;
}

export interface FormSubmission {
  data: Record<string, unknown>;
}

export interface FileMetadata {
  id: string;
  url: string;
  name: string;
  size: number;
  type: string;
  checksum: string;
}
